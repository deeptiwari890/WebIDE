{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAmDeA,MAzCf,SAAgBC,GACZ,IACIC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,YACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SAEJ,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACI,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACI,sBAAKE,UAAU,eAAf,UACKN,EACD,wBACAO,KAAK,SACLD,UAAU,sBACNE,QAAS,kBAAIH,GAAQ,SAAAI,GAAQ,OAAKA,MAHtC,SAKI,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,WAGtD,cAAC,aAAD,CACIC,eAjBZ,SAAsBC,EAAQC,EAAMd,GAEhCC,EAASD,IAgBDA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,MAAO,WACPC,aAAa,SCvClB,SAASC,EAAgBC,EAAKC,GACzC,IAAMC,EAHK,WAGkBF,EAC7B,EAA0BpB,oBAAS,WAC/B,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EACOG,KAAKC,MAAMJ,GAGM,oBAAjBF,EACAA,IAEAA,KATf,mBAAOvB,EAAP,KAAc8B,EAAd,KAiBA,OAJAC,qBAAU,WACNL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MACnD,CAACwB,EAAYxB,IAER,CAACA,EAAO8B,GCuCJI,MAzDf,WACE,MAAwBb,EAAgB,OAAO,IAA/C,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAsBf,EAAgB,MAAM,IAA5C,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAoBjB,EAAgB,KAAK,IAAzC,mBAAOkB,EAAP,KAAWC,EAAX,KACA,EAA4BtC,mBAAS,IAArC,mBAAOuC,EAAP,KAAeC,EAAf,KAgBA,OAdAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,iCAAD,OAECP,EAFD,mCAGEE,EAHF,qCAIGE,EAJH,wCAOT,KAEF,OAAO,kBAAKM,aAAaF,MACxB,CAACR,EAAME,EAAKE,IAGb,qCAEE,sBAAKlC,UAAU,gBAAf,UACE,cAAC,EAAD,CACEP,SAAS,MACTC,YAAY,OACZC,MAAOmC,EACPlC,SAAUmC,IAEZ,cAAC,EAAD,CACCtC,SAAS,MACTC,YAAY,MACZC,MAAOqC,EACPpC,SAAUqC,IAEX,cAAC,EAAD,CACCxC,SAAS,KACTC,YAAY,KACZC,MAAOuC,EACPtC,SAAUuC,OAGb,qBAAKnC,UAAU,OAAf,SACE,wBACEoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eC5CFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02a85550.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport {Controlled as ControlledEditor} from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\nfunction Editor(props) {\n    const {\n        language,\n        displayName,\n        value,\n        onChange\n    } = props\n    const [open, setOpen] = useState(true)\n\n    function handleChange(editor, data, value)\n    {\n        onChange(value)\n    }\n    return (\n        <div className={`editor-container ${open ? '' : 'collapsed' }`}>\n            <div className=\"editor-title\">\n                {displayName}\n                <button\n                type=\"button\"\n                className=\"expand-collapse-btn\"\n                    onClick={()=>setOpen(prevOpen => !prevOpen)}\n                >\n                    <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n                </button>\n            </div>\n            <ControlledEditor \n                onBeforeChange={handleChange}\n                value={value}\n                className=\"code-mirror-wrapper\"\n                options={{\n                    lineWrapping: true,\n                    lint: true,\n                    mode: language,\n                    theme: 'material',\n                    lineNumbers: true\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Editor;","import React from 'react'\nimport { useEffect, useState } from 'react'\n\nconst PREFIX = 'WEB-IDE-'\n\nexport default function useLocalStorage(key, initialValue) {\n    const prefixedKey = PREFIX + key\n    const [value, setValue] = useState(()=> {\n        const jsonValue = localStorage.getItem(prefixedKey)\n        if (jsonValue != null) {\n            return JSON.parse(jsonValue)\n        }\n\n        if (typeof initialValue === 'function') {\n            return initialValue()\n        } else {\n            return initialValue\n        }\n    })\n\n    useEffect(()=>{\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\n    },[prefixedKey,value])\n\n    return [value, setValue]\n}\n","import './App.css';\nimport React,{useState, useEffect} from 'react';\nimport Editor from './components/Editor';\n// import { ToastDemo } from './components/toastdemo';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage('html','')\n  const [css, setCss] = useLocalStorage('css','')\n  const [js, setJs] = useLocalStorage('js','')\n  const [srcDoc, setSrcDoc] = useState('')\n\n  useEffect(()=>{\n    const timeout = setTimeout(()=>{\n      setSrcDoc(`\n      <html>\n        <body>${html}</body>\n        <style>${css}</style>\n        <script>${js}</script>\n      </html>\n      `)\n    },250)\n\n    return ()=> clearTimeout(timeout)\n  }, [html, css, js])\n\n  return (\n    <>\n      {/* <ToastDemo /> */}\n      <div className=\"pane top-pane\">\n        <Editor \n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n         language=\"css\"\n         displayName=\"CSS\"\n         value={css}\n         onChange={setCss}\n        />\n        <Editor\n         language=\"js\"\n         displayName=\"JS\"\n         value={js}\n         onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}